{"google":"UA-2040979-9","tagline":"Minimalist web framework for nodejs","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Meryl","body":"# About\r\n\r\nMeryl is a minimalist web framework for [nodejs](http://github.com/ry/node) platform which is very simple to use, fun to play and easy to modify.\r\n\r\nMeryl remains as thin web layer over nodejs's built-in http module which mainly consists of plugins and handlers processed through every http request and response pipe.\r\n\r\n![layers](https://github.com/kadirpekel/meryl/wiki/images/infog.png)\r\n\r\nDespite the small size of its code base, it has plenty of promising features. Some of the feature highlights are:\r\n\r\n* Flexible architecture\r\n* Url routing with an easy expression syntax.\r\n* Powerful middleware infrastructure. Also compatible with [connect](http://github.com/senchalabs/connect])framework.\r\n* Modular template rendering mechanism. You can choose using your mother's template engine.\r\n* Dynamic template serving.\r\n* Command line util for ad-hoc setup.\r\n\r\nIt consists of only ~240 source lines of code. Here is the proof.\r\n\r\n```\r\n$ uglifyjs -b -nm --no-seqs -ns -nc meryl.js | wc -l\r\n     233\r\n```\r\n\r\n# Install\r\n\r\nUse [npm](http://github.com/isaacs/npm) for painless, quicky experience.\r\n\r\n```sh\r\nnpm install meryl\r\n```\r\n\r\nIf you don't have npm, you can simply put meryl in your '$HOME/.node_libraries' directory.\r\n\r\n```sh\r\ncd $HOME/.node_libraries\r\ngit clone http://github.com/coffeemate/meryl.git\r\n```\r\n\r\nYep, it's ready already. Now you can use it in your applications by loading as usual in nodejs.\r\n\r\n```js\r\n// app.js\r\nvar meryl = require('meryl');\r\n\r\n// Use meryl instance here\r\n\r\n```\r\n\r\n# Quickstart\r\n\r\nIf you installed Meryl sucessfully, now you are ready to get your feet wet. Create a file named 'app.js' with the copy of contents below.\r\n\r\n```js\r\n// app.js\r\n\r\nvar meryl = require('meryl');\r\n\r\nmeryl.h('GET /{yourname}?', function (req, resp) {\r\n  resp.end('Hello, ' + req.params.yourname || 'World');\r\n});\r\n\r\nmeryl.run();\r\n```\r\n\r\nOk, let's run it.\r\n\r\n```plain\r\n$ node app.js\r\n```\r\n\r\nNow, go hit your http client with the url <http://localhost:3000>, also try <http://localhost:3000/meryl> and guess what you will see.\r\n\r\n# Documentation\r\n\r\n## Meryl request\r\n\r\nMeryl extended http request object passed as a parameter to meryl.h and meryl.p callback functions which gives you some utilities to handle http request data coming from the client.\r\n\r\n### req.params\r\n\r\nObject containing query string and path parameters with url info\r\n\r\n```js\r\nmeryl.h('GET /list/{item}', function(req, resp) {\r\n  // try: GET /list/comments?pagesize=10\r\n  resp.end('Listing ' + req.params.pagesize + ' '\r\n    + req.params.item);\r\n});\r\n```\r\n\r\n### req.postdata\r\n\r\nBuffer object received from the clients. It's a raw data which must be processed to refine if required\r\n\r\n```js\r\nmeryl.h('POST /preview', function(req, resp) {\r\n  // echo post data as text\r\n  resp.setHeader('content-type', 'text/plain');\r\n  resp.end(req.postdata);\r\n});\r\n```\r\n\r\n## Meryl response\r\n\r\nMeryl extended http response object passed as a parameter to meryl.h and meryl.p callback functions which gives you some utilities to shape http response data delivering to the client.\r\n\r\n### resp.render(templateName, data)\r\n\r\nRenders a template name by manipulating it with given context data.\r\n\r\n```js\r\nmeryl.h('GET /', function(req, resp) {\r\n  resp.render('homepage', {foo: 'bar'});\r\n});\r\n```\r\n\r\n### resp.redirect(location)\r\n\r\nHelper method that redirects client request to another location.\r\n\r\n```js\r\nmeryl.h('GET /', function(req, resp) {\r\n  resp.redirect('/another_page');\r\n});\r\n```\r\n\r\n## Meryl\r\n\r\nThe Meryl object itself.\r\n\r\n### meryl.options\r\n\r\nOptions object which is used to configure meryl\r\n\r\nThere are three pre-defined options. These are:\r\n\r\n* templateDir: Used to point the path of directory containing the templates. Default is an empty string.\r\n* templateExt: Template file extension. The default is '.jshtml'\r\n* templateFunc: Template rendering engine interface. This option takes a function which take two parameters. First one is the string content of the template while the second one is template context object. See 'examples' directory for sample applications.\r\n\r\n### meryl.handle(expr, callback)\r\n\r\nRegisters a new http handler to global Meryl instance. First argument is the routing pattern which combines http verb with path expression while the second one is the callback function which will be executed in meryl context. If router pattern matches any http request the given callback executed with current req, resp objects.\r\n\r\nIf more than one handlers registered with same router pattern only the first registered one will be executed.\r\n\r\nRouting pattern is very simple in mind:\r\n\r\n```plain\r\n$HTTP_VERB $PATH_EXPRESSION\r\n```\r\n\r\nThe whole expression builds a meryl flavored reqular expression which exposes two types of path parameters.\r\n\r\n* { ... } – curly braced parameters are partial, they match until the meet '?', '/' or '.' character\r\n* < ... > – tagged(!) parameters are greedy, they match whatever they meet until you denote a block character.\r\n\r\nHere are some examples:\r\n\r\n* {method} <whatever>\r\n* GET /\r\n* POST /index.html\r\n* PUT /long/path/index.html\r\n* DELETE /delete/something?foo=bar\r\n* GET /posts/{postid}\r\n* GET /posts/this-is-a-long-post-id\r\n* GET /posts/32432\r\n* GET /files/<filepath>.{ext}\r\n* GET /files/filename.pdf\r\n* GET /files/this/is/a/long/file/path.pdf\r\n* GET /(index.html)?\r\n* GET /\r\n* GET /index.html\r\n\r\nLet's take look at a concrete example like below:\r\n\r\n```js\r\nmeryl.h('GET /repo/<filepath>/{version}', function(req, resp) {\r\n  var fileContents = readRepo(req.params.filepath, req.params.version);\r\n  resp.end(fileContents);\r\n});\r\n```\r\n\r\nAlso there are shorthand helper functions mapped to individual http methods. You can declare handlers implicitly by using meryl.get(expr, callback), meryl.post(expr, callback), meryl.put(expr, callback), meryl.put(expr, callback) functions. You must omit explicit http method names in expressions\r\n\r\n```js\r\nmeryl.get('/posts/{postid}', function(req, resp) {\r\n  resp.end('reading post: ' + req.params.postid);\r\n});\r\n\r\nmeryl.put('/', function(req, resp) {\r\n  throw 'not supported';\r\n});\r\n```\r\n\r\n### meryl.plug([expr,] callback [, callback])\r\n\r\nThis function registers a plugin to the global meryl instance. More than one plugin can be executed on the same matched http request within the registration order. Plugin system simply exposes a middleware implementation for Meryl.\r\n\r\nFirst argument is a router pattern which is also mentioned in meryl.h before.\r\n\r\nThe second one is the callback function which takes usual req, resp objects and alsa a function reference argument named 'next'. If you finished your work inside the plugin, you simply call 'next' to jump over to the next registered plugin.\r\n\r\nYou may want to break plugin iteration, then do not call 'next' method but be sure to end the http response in some way. Otherwise all the request/response pipe will hang which makes no sense for client side.\r\n\r\nHere is a sample application demonstrating plugins.\r\n\r\n```js\r\n// app.js\r\n\r\nvar meryl = require('meryl');\r\n\r\nfunction validate(u, p) { return false; }\r\n\r\nmeryl.p('*', function(req, resp, next) {\r\n  resp.setHeader('server', 'meryl-nodejs');\r\n  next();\r\n});\r\n\r\nmeryl.p('{method} /private/*', function(req, resp, next) {\r\n  if(validate(req.params.uname, req.params.passwd)) {\r\n    next();\r\n  } else {\r\n    resp.statusCode = 401;\r\n    throw 'access denied';\r\n  }\r\n});\r\n\r\nmeryl.p('GET *', function(req, resp, next) {\r\n  console.log('logging all GET requests');\r\n  next();\r\n});\r\n\r\nmeryl.h('GET /(index.html)?', function (req, resp) {\r\n  resp.end('Demonstrating plugins');\r\n});\r\n\r\nrequire('http').createServer(meryl.cgi()).listen(3000);\r\n```\r\n\r\nIf you pass only callback function as first parameter by omitting expression Meryl assumes expression as '*' to match all requests.\r\n\r\n```js\r\nmeryl.p(function(req, resp, next) {\r\n    resp.setHeader('server', meryl-nodejs');\r\n    next();\r\n});\r\n```\r\n\r\nAlso you should mind appending more callbacks. It is very useful when registering pre-defined modules.\r\n\r\n```js\r\nvar connect = require('connect');\r\nmeryl.p(connect.static('/srv/static_content'), connect.logger());\r\nmeryl.run();\r\n```\r\n\r\n### meryl.fabby([opts] | ([expr] [,callback [, callback]]))\r\n\r\nThis is a funny function which features fabjs like chaining of Meryl plugins and handlers.\r\n\r\n```js\r\nvar connect = require('connect');\r\nvar meryl = require('meryl');\r\n\r\nmeryl.fabby\r\n  (connect.logger(), connect.static('/srv/static_content'))\r\n  ('GET /', function (req, resp) {\r\n      resp.render('home');\r\n    }\r\n  )\r\n  ('GET /posts/{postid}', function (req, resp) {\r\n      resp.render('post');\r\n    }\r\n  ) \r\n  ('GET /posts/{postid}/comments/{commentid}', function (req, resp) {\r\n      resp.render('comment');\r\n    }\r\n  )  \r\n  ();\r\n```\r\n\r\n### meryl.handleNotFound(cb)\r\n\r\nCustom 404 file not found handler\r\n\r\n### meryl.handleError(cb)\r\n\r\nCustom 500 server error handler\r\n\r\n### meryl.factory()\r\n\r\nreturns a new Meryl instance\r\n\r\n### meryl.cgi(opts)\r\n\r\nIt's the main entry point for Meryl. It returns a function reference for using with nodejs's built-in http module while creating a server instance. You can pass an object for further using in Meryl context such 'this.options'.\r\n\r\n```js\r\nrequire('http').createServer(meryl.cgi({debug:true})).listen(3000);\r\n```\r\n\r\n### meryl.run(opts)\r\n\r\nHelper function that runs Meryl instantly by wrapping it with an internally created http server. It returns running http server instance.\r\n\r\n```js\r\nmeryl.run({debug:true, port: 8080}))\r\n```\r\n\r\n# Guide\r\n\r\n* You can chain plugin and handler declerations as well.\r\n* You may choose using verbose function names instead single letter ones.\r\n* If you want to register a plugin for processing all requests you can simply pass only your callback to the meryl.p function.\r\n* You can mark path expression variables as optional using a trailing question mark.\r\n* Meryl is Connect framework compatible. You can plug any Connect middleware module to Meryl.\r\n* Below the example demonstrates all the tips above.\r\n\r\n```js\r\nrequire('http').createServer(\r\n      require('meryl')\r\n\r\n        .plug(require('connect').static('/srv/static_content'))\r\n\r\n        .plug(\r\n          function(req, resp, next) { log(req.params.pathname); next(); })\r\n\r\n        .plug('POST *',\r\n          function(req, resp, next) { throw 'restricted'; })\r\n\r\n        .handle('GET /',\r\n          function(req, resp) { resp.end('homepage'); })\r\n\r\n        .handle('GET /greet/({who}.html)?',\r\n          function(req, resp) { resp.end('Hello, ' + req.params.who || 'World'); })\r\n\r\n        .cgi()\r\n      ).listen(3000);\r\n```\r\n\r\n# Source\r\n\r\nMeryl uses lovely git and github. You can find sources here. To obtain a copy, simply type:\r\n\r\n```sh\r\ngit clone http://github.com/coffeemate/meryl.git\r\n```\r\n\r\nMeryl itself is licensed under MIT License http://github.com/coffeemate/meryl/blob/master/license\r\n\r\nThere are some kind people contributes to this project. Please join and help us to move Meryl ahead together.\r\n\r\n * Kadir Pekel (Author) <http://twitter.com/kadirpekel>\r\n * George Stagas <http://twitter.com/stagas>\r\n * Samuel Morello <http://twitter.com/ouvanous>\r\n * Michael Siebert <http://twitter.com/siebertm>\r\n * Vladimir <http://github.com/semanticprogrammer>\r\n * Tom R <http://www.twitter.com/rx>\r\n\r\n# More\r\n\r\nMeryl has much more, please continue from the links below.\r\n\r\nPlease visit wiki page for documentation:\r\n  <http://github.com/kadirpekel/meryl/wiki>\r\n\r\nAlso there are plenty of examples in 'examples' directory:\r\n  <http://github.com/kadirpekel/meryl/tree/master/examples>\r\n\r\nFor updates please follow:\r\n  <http://twitter.com/meryljs>"}